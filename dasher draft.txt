#include "raylib.h"
#include <cstdio>

struct AnimData
{
    Rectangle rec;
    Vector2 pos;
    int frame;
    float updateTime;
    float runningTime;
};


int main(){
    //window dimensions
    const int windowWidth = 512;                                                            //game window width set to 400 px
    const int windowHeight = 380;                                                           //game window height set to 600 px
    //initialize the window
    InitWindow(windowWidth,windowHeight,"Dapper Dasher");
    
    // //acceleration due to gravity (pixels/frame)/frame
    // const int gravity{1};

    //acceleration due to gravity (pixels/sec)/sec
    const int gravity{1800};

    //rectangle dimensions
    //int r_width =  50;
    //int r_height = 80;
    //int pos_y = windowHeight - r_height;
    int velocity;                                        

    // //jump velocity in pixels/frame
    // const int jumpVel = -18;

    //jump velocity in pixels/sec
    const int jumpVel = -675;
    
    //is in air check
    bool isInAir{};

    //Scarfy texture
    Texture2D scarfy = LoadTexture("textures/scarfy.png");
    // Rectangle scarfyRec;
    // scarfyRec.width = scarfy.width/6;
    // scarfyRec.height = scarfy.height;
    // scarfyRec.x = 0;
    // scarfyRec.y = 0;
    AnimData scarfyData;
    scarfyData.rec.width = scarfy.width/6;
    scarfyData.rec.height = scarfy.height;
    scarfyData.rec.x = 0;
    scarfyData.rec.y = 0;

    //Vector2 scarfyPos;
    // scarfyPos.x = windowWidth/2 - scarfyRec.width/2;
    // scarfyPos.y = windowHeight - scarfyRec.height;
    scarfyData.pos.x = windowWidth/2 - scarfyData.rec.width/2;
    scarfyData.pos.y = windowHeight - scarfyData.rec.height;
    //int frame = 0;
    scarfyData.frame = 0;
    


    //Nebula texture
    Texture2D nebula = LoadTexture("textures/12_nebula_spritesheet.png");

    //AnimData for nebula
    AnimData nebData{ 
        {0.0,0.0,nebula.width/8,nebula.height/8} ,     //Rectangle rec
        {windowWidth,windowHeight-nebula.height/8},    //Vector2  pos
        0,                                             //Int frame
        1.0/12.0,                                      //Float updateTime
        0                                              //Float runningTime
    };
    AnimData neb2Data{ 
        {0.0,0.0,nebula.width/8,nebula.height/8} ,           //Rectangle rec
        {windowWidth + 300,windowHeight-nebula.height/8},    //Vector2  pos
        0,                                                   //Int frame
        1.0/16.0,                                            //Float updateTime
        0                                                    //Float runningTime
    };

    // Rectangle nebRec{0.0,0.0,nebula.width/8,nebula.height/8};
    // Vector2 nebPos{windowWidth,windowHeight-nebRec.height};

    // Rectangle neb2Rec{0.0,0.0,nebula.width/8,nebula.height/8};
    // Vector2 neb2Pos{windowWidth + 300,windowHeight-nebRec.height};

    //nebula x velocity (pixels/second)
    int nebVel{-250};
    //int nebFrame = 0;

    //amount of time before we update the scarfy animation frame
    //const float updateTime = 1.0/12.0;
    scarfyData.updateTime = 1.0/12.0;
    //float runningTime{};
    scarfyData.runningTime = 0.0;
    //amount of time before we update the nebula animation frame
    // const float nebUpdateTime = 1.0/24.0;
    // float nebRunningTime{};

    // int neb2Frame{};
    // const float neb2UpdateTime{1.0/16.0};
    // float neb2RunningTime;

    //setting target fps of the game to 60 fps 
    SetTargetFPS(60);                                                          
    while(!WindowShouldClose()){
        //start drawing
        BeginDrawing();
        ClearBackground(WHITE);
        //game logic starts down here 

        //getting the delta time(time between frames)
        const float dT = GetFrameTime();
        // printf("%f\n",dT);
        //DrawRectangle(((windowWidth/2)-(r_width/2)),pos_y,r_width,r_height,BLUE);
        
        
        //draw scarfy
        DrawTextureRec(scarfy,scarfyData.rec,scarfyData.pos,WHITE);
        //draw nebula
        DrawTextureRec(nebula,nebData.rec,nebData.pos,WHITE);
        //draw the second nebula
        DrawTextureRec(nebula,neb2Data.rec,neb2Data.pos,RED);
       
       
       
        // if(pos_y >= windowHeight - r_height){
        //     velocity = 0;
        //     isInAir = false;
        // }else{
        //     velocity += gravity;
        //     isInAir = true;
        // }

        // if(IsKeyPressed(KEY_SPACE) && !isInAir){
        //     velocity += jumpVel;               
        // }

        // pos_y +=velocity;

         if(scarfyData.pos.y >= windowHeight - scarfyData.rec.height){
            velocity = 0;
            isInAir = false;
        }else{
            velocity += gravity * dT;
            isInAir = true;
        }

        if(IsKeyPressed(KEY_SPACE) && !isInAir){
            velocity += jumpVel ;               
        }

        //update scarfy position
        scarfyData.pos.y +=velocity * dT;
        //update nebula position
        nebData.pos.x +=nebVel * dT;
        //update the second nebula position
        neb2Data.pos.x +=nebVel * dT;
       
        //update running time
        scarfyData.runningTime += dT;
        if (scarfyData.runningTime >=scarfyData.updateTime && !isInAir){
            scarfyData.runningTime = 0.0;
            //updating the animation frame
            scarfyData.rec.x = scarfyData.frame * scarfyData.rec.width;
            scarfyData.frame++;
            if(scarfyData.frame > 5){
                scarfyData.frame = 0;
            }
        }
        //update nebula running time
        nebData.runningTime += dT;
        if (nebData.runningTime >=nebData.updateTime ){
            nebData.runningTime = 0.0;
            //updating the animation frame
            nebData.rec.x = nebData.frame * nebData.rec.width;
            nebData.frame++;
            if(nebData.frame > 7){
                nebData.frame = 0;
            }
        }
        //update the second nebula running time
        neb2Data.runningTime += dT;
        if (neb2Data.runningTime >=neb2Data.updateTime ){
            neb2Data.runningTime = 0.0;
            //updating the animation frame
            neb2Data.rec.x = neb2Data.frame * neb2Data.rec.width;
            neb2Data.frame++;
            if(neb2Data.frame > 7){
                neb2Data.frame = 0;
            }
        }



        //Stop drawing
        EndDrawing();

    }
    UnloadTexture(scarfy);
    UnloadTexture(nebula);
    CloseWindow();
}